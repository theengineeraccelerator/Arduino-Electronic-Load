Arduino Electronic Load Version 1

Introduction
This project is a simple electronic load using the Arduino 

Conventions
Red Text: A To-Be-Determined requirement. Color set by the Comments element type
[ ... ]: Future Feature. Color set by the Identifier element type
CAPITAL TEXT: Text to be replaced with product specific names

Product Characteristics
	- Must interface with serial monitor of Arduino Uno 
    - Must incorporate a heat sink and a fan
	- Must be portable
    - Weight: 3 pounds
    - Height (X): 4in
    - Length (Y): 6 in
    - Width (Z): 6 in
    - Target Cost: Cheap. Equal to or less than $50.00
    - Product Life Time Target: 5 years
    - Operating Temperature: commercial temperature range

Devices
Arduino Electronic Load 
	Feature List
	//MK - I do not see the Arduino as a Feature. It should be added.  
	Current Dial
		Characteristics
			- Analog dial
			- Sets current that is going to be drawn from the device under test
			- Fine adjustment between values of current to be set //MK - Specifically how fine?

	DUT (Device Under Test)
		Characteristics
			- Source
			- Provides current to be drawn into electronic load //MK - this sentence is unclear. 
			- Has a voltage across it that can be measured and provided to the user
			- Output voltage: Any range //MK - So 1000V is acceptable?
			- output current: Up to 2A
	
	Overload Protection
		Characteristics  //MK - It is unclear what types of overloading you are protecting from. Overheating, over voltage?
			- Protects load from overloading 
			- Cuts current from source
			- Protects components found on board from overloading
			
	Current Sink Driver
		Characteristics
			- Provides necessary power to drive the current sink  
			- Regulates the power driven to the current sink
			- Controls how much current passes through current sink  //MK - What type of control? Linear? PWM? Other
	
	Current Sink
		Characteristics
			- Sinks current from the Device Under Test(source)
			- Range: 0 - 2A
			- Adjusts how much current passes through
	
	Current sensor
		Characteristics
			- Senses current from current sink stage   //MK - if you refer to another feature capitalize it. This shows the reader you are talking about another part of the device 
			- Max Current: 3A
			- Accuracy: 1%
	
	Voltage sensor
		Characteristics
			- Senses voltage from device under test(source)
			- Any voltage range // MK really? 1000V is ok
			- Accuracy: 1%
	
	Temperature sensor
		Characteristics
			- Senses temperature from heat sink
			- Commercial temperature range
			- Accuracy: 1%
	
	Heat Sink
		Characteristics
			- Sinks the heat from current sink stage
			- High temperature rating   //MK - Specifically how high do we need?
	
	Fan Control //MK - Can this be combined with the Arduino feature?  
		Characteristics
			- Controls operation of fan
			- Compares signal from temperature sensor to temperature limit set in Arduino
			- Turns on/off signal to fan depending on temperature of heat sink and temperature limit
			
	Fan Driver
		Characteristics
			- Provides necessary power to drive the Fan
			
	Fan	
		Characteristics
			- Cools down heat sink and circuit board
			- Blades spin at a moderate level  //MK - What do you mean by “Moderate”
			- Provides air to heat sink  //MK - this repeats what is in the first bullet item
		
	LED     
		Characteristics
			- Red LED 
            - Max Voltage: 2.2V  //MK - do you care about this level of detail at this stage?
            - Max Current: 20mA  //MK - do you care about this level of detail at this stage?			
			- Used to display overloading  //MK - this is really good thing to say
	Computer
		Characteristics
			- Uses Arduino serial monitor for display
			- Displays current to be drawn, set by user
			- Displays load current 
			- Logs load current versus time
	
Behavior Definition
	Product States
	SETUP
	SOURCE SETUP
	WELCOME
	SAFETY CHECK
	IDLE
	MEASURE and CHECK
	FAN

	Detailed Behavior
	 //MK - General note. Be careful about what you call events. Events must be triggered by something. Right now you have Events called things like “Current Measurement”. This is not an event. It is what you do as the result of an event. The event for this could be “Sample Timer Ends”
	Initial State: SETUP 
		Event: Entry   //MK - this is very clear. Can this state be combined with WELCOME?
			- Clear user interface display
			- Set all values to zero 
			- Open current dial
			- Open current trace coming from source using switch found in overload protection block
			- Change State to WELCOME
	
	Initial State: SOURCE SETUP
		Event: Connection
		    - Connect device under test to electronic load
		
	Initial State: WELCOME
		Event: ENTRY
			- Open serial monitor  //MK - This is an event. The system can not do this by itself. Only the user can. 
			- Give user command instructions to type in serial monitor
		Event: Safety Check Command
			- Change state to SAFETY CHECK 
		Event: Start command
		    - Change state to IDLE  //MK - why IDLE. Should this be MEAURE and CHECK
	
	Initial State: SAFETY CHECK  //MK - should this be happening all the time? How would you show that behavior
		Event: Entry
			- Send state message to computer
			- Check sensorVoltage 
		Event: Measure  //MK - as stated this is not a event. Do you mean Measure Command?
			- Read voltage from voltage sensor
			- Construct Data Packet
			- Send to Computer 
		Event: End Measurement  //MK - As stated this is not an event
		    - Set state to IDLE
	
	Initial State: IDLE
		Event: Entry
			- Stop measurement
			- Send State message to computer
			- Give user command instructions to type in serial monitor
		Event: measure command 
			- Change state to MEASURE AND CHECK
		Event: Dial is turnd clockwise 
			- increases current setpoint 
		Event: Dial is turned counterclockwise
			- decreases current setpoint
		Event: Command Set Mode
			- Change measurementMode
		Event: Safety Check Command
			- Change state to SAFETY CHECK
		
	Initial State: MEASURE AND CHECK
		Event: Entry
			- Check measurementMode
			- Start Timer
		Event: Current Measurement  //MK - this is not an Event. Rewrite it as an Event
			- Read current from current sensor
				If Current >= 10A go to Overload Protection state
				If Current < 10A continue
			- Construct Data Packet
			- Send to Computer
			- Display value on serial monitor
		Event: Temperature Check  //MK - this is not an Event. Rewrite it as an Event. For example the event could be “Temperature Goes out of Range”
			- Read temperature from heat sink using temperature sensor
			- Construct Data Packet
			- Send to Computer
			- Check if temperature is above temperature limit 
				- If Yes, go to FAN state 
				- if No, remain
	    Event: Voltage Measurement  //MK - this is not an Event. Rewrite it as an Event 
			- Go to SAFETY CHECK state
		Event: End Measurement  //MK - this is not an Event. Rewrite it as an Event
			- Set state to IDLE
			
	Initial State: Overload Protection

		Event: Entry
			- Open current trace coming from source
			- Display message "Current Overload" to user
			- Inform user to decrease current
			- Go to SAFETY CHECK state
		 
	Initial State: FAN    //MK - Does this need to be a separate State. 
		Event: Entry
			- Start fanTimer
		Event: Check FanTimer
			- Adjust fan speed
		Event: Check temperatureSensor 
		    - if above temperature limit  //MK - Is this backward? 
				- Turn off fan
			- if below temperature limit
				- Keep fan on 
		Event: End Fan Check
			- Set state to MEASUREMENT AND CHECK


Data Structure
	Variables
		- Timer
		- fanTimer
		- currentSensor   //MK - what is the variable capturing? The current value? Then maybe naming it currentValue would be more clear.
		- voltageSensor
		- temperatureSensor
		- measurementMode
	Data Packet 
		- Voltage
		- Current
		- Temperature
Interface List
	Arduino <--> Computer
	Characteristics
		- Serial Monitor based
	
	Command Description
	setmode 		Set Measurement logging mode
	safetycheck     Checks voltage across source
	start           Ensures that load is ready to measure
	measure			Starts measurement
	end				Ends Measurement



Security
Regulation
Mechanical
Manufacturing
